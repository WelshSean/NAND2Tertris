// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=notInstructionfifteen);
    Mux16(a=outALU, b=instruction, sel=notInstructionfifteen, out=outARegisterMux);   // Input Mux  
    Not(in=instruction[12], out=notAOperand);   
    Or(a=instruction[5], b=notInstructionfifteen, out=instruction5OrnotInstructionfifteen);                                          
    ARegister(in=outARegisterMux, load=instruction5OrnotInstructionfifteen, out=outARegister, out[0..14]=addressM); // A Register - load if d1 (instruction fifteen, or A instructioN)
    ALU(x=outDRegister, y=outALUMux,  zy=instruction[9], ny=instruction[8], zx=instruction[11], 
        nx=instruction[10], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=ALUIsZero, ng=ALUIsNeg);

    Mux16(a=outARegister, b=inM,  sel=instruction[12], out=outALUMux);                                                      // Mux preceeding ALU, sel is a
    And(a=instruction[4], b=instruction[15], out=instruction4AndInstruction15);
    DRegister(in=outALU, load=instruction4AndInstruction15, out=outDRegister);                                                                     // D Register - load is d2
    PC(in=outARegister, load=CInstructAndALUPosNegorALUIsZero, inc=notj1AndNotj2AndNotj3OroperandIsZero, reset=reset, out[0..14]=pc);                           // 15 bits - strip off operand

    // PC Logic

    // No Jump

    Not(in=instruction[2], out=notj1);                                                                                                   // Not j1
    Not(in=instruction[1], out=notj2);                                                                                                   // Not j2
    Not(in=instruction[0], out=notj3);                                                                                                   // Not j3
    And(a=notj1, b=notj2, out=notj1AndNotj2);                                                                                            // Not j1 and not j2
    And(a=notj1AndNotj2, b=notj3, out=notj1AndNotj2AndNotj3);                                                                            // Not j1 and not j2 and not j3 => inc
    Not(in=instruction[15], out=operandIsZero);
    Or(a=notj1AndNotj2AndNotj3, b=operandIsZero, out=notj1AndNotj2AndNotj3OroperandIsZero);

    // Jump
    And(a=instruction[2], b=ALUIsNeg, out=j1AndALUIsNeg);                                                                                // jump because ALU output negative
    And(a=instruction[1], b=ALUIsZero, out=j2AndALUIsZero);                                                                              // jump because ALU output zero
    Not(in=ALUIsNeg, out=ALUIsPos);
    And(a=instruction[0], b=ALUIsNeg, out=j1AndALUIsPos);                                                                                // jump because ALU output positive
    Or(a=j1AndALUIsNeg, b=j1AndALUIsPos, out=ALUPosNeg);
    Or(a=ALUPosNeg, b=j2AndALUIsZero, out=ALUPosNegorALUIsZero);                                                                          // COnditions meta => PC load output
    And(a=instruction[15], b=ALUPosNegorALUIsZero, out=CInstructAndALUPosNegorALUIsZero);

    // send d3 => writeM
    And(a=instruction[3],b=instruction[15], out=writeM);
    

}